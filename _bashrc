# vim: set ft=sh
# https://github.com/smerrell/dotfiles
#

platform=$(uname)

if [[ $platform == Cygwin* || $platform == MINGW* ]]; then
  # downside of using MSYS
  LS_COLORS="di=01;36:"
  export LS_COLORS
elif [[ $platform == Darwin* ]]; then
  export GIT_EDITOR='mvim -f'
fi

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

[[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm"

#
# Dircolors
#
if [ -f ~/.dircolors ]; then
  eval `dircolors -b ~/.dircolors`
fi

# see environ manfile
export EDITOR=gvim       # Default Editor
export VISUAL=$EDITOR   # Visual not really used differently from EDITOR anymore
export LESS='-iMR'      # Case insensite search, verbose prompting and raw output
export PAGER=less       # Used to display text / man files

#
# History
#
HISTCONTROL=ignoredups                    # No duplicate commands in history
HISTSIZE=50000                            # For a huge history
export HISTIGNORE="[   ]*:&:bg:fg:exit"   # Don't save these commands in the history
shopt -s histappend                       # Append to the history file, not overwrite
# Write to bash_history immediately.
# http://askubuntu.com/questions/67283/is-it-possible-to-make-writing-to-bash-history-immediate
export PROMPT_COMMAND="history -a; history -c; history -r; $PROMPT_COMMAND"

#
# Bash behavior
#
shopt -s checkwinsize   # Checks window size to get proper line wrapping
shopt -s cdspell        # Corrects minor spelling errors when cd-ing
set -o vi               # Set prompt to vi mode
set -o notify           # Report status of terminated background jobs immediately

#
# Prompt Customizations
#
RED="\[\033[0;31m\]"
YELLOW="\[\033[0;33m\]"
GREEN="\[\033[0;32m\]"
GRAY="\[\033[1;30m\]"
EMPTY="\[\033[0;37m\]"

LIGHTBLUE="\[\033[38;5;111m\]"
LIGHTRED="\[\033[38;5;172m\]"
LIGHTYELLOW="\[\033[38;5;229m\]"
CONTINUE="\[\033[38;5;242m\]"
DARKGRAY="\[\033[38;5;247m\]"

# Solarized
SOLRED="\[\033[0;31m\]"
SOLBLUE="\[\033[0;34m\]"
SOLBASE="\[\033[1;34m\]"
SOLBASE01="\[\033[1;32m\]"

# Merges Git and SVN info to make the PS1 a little cleaner looking
# Got this from: http://www.codeography.com/2009/05/26/speedy-bash-prompt-git-and-subversion-integration.html
#
scm_ps1() {
    local s=
    if [[ -d ".svn" ]] ; then
        s=\($(svn info | sed -n -e '/^Revision: \([0-9]*\).*$/s//\1/p' )\)
    else
        s=$(__git_ps1 "(%s)")
    fi

    echo -n "$s"
}

function gifify {
  if [ -z "$1" ]; then
    echo "$(tput setaf 1)No input file given. Example: gifify example.mov [max width (pixels)]$(tput sgr 0)"
    return 1
  fi

  output_file="${1%.*}.gif"

  echo "$(tput setaf 2)Creating $output_file...$(tput sgr 0)"

  if [ ! -z "$2" ]; then
    maxsize="-vf scale=$2:-1"
  else
    maxsize=""
  fi

  ffmpeg -loglevel panic -i $1 $maxsize -r 10 -vcodec png gifify-tmp-%05d.png
  convert +dither -layers Optimize gifify-tmp-*.png GIF:- | gifsicle --no-warnings --colors 256 --delay=10 --loop --optimize=3 --multifile - > $output_file
  rm gifify-tmp-*.png

  echo "$(tput setaf 2)Done.$(tput sgr 0)"
}

# [hh:mm] username@host (git branch || svn revision) ~/working/directory
# $

# Pretty ugly hack for msys... need to figure out how to determine if my
# console is 256 color capable
if [ $OSTYPE = 'msys' ]; then
  PS1="\[\033]0;\w\007$GREEN[\$(date +%H:%M)] \u@\h $RED\$(scm_ps1) $YELLOW\w \n$EMPTY\$ $GRAY"
  PS2="$GRAY> $GRAY"
else
  PS1="\[\033]0;\w\007$LIGHTBLUE[\$(date +%H:%M)] \u@\h $LIGHTRED\$(scm_ps1) $LIGHTYELLOW\w \n$EMPTY\$ $DARKGRAY"
  PS2="$CONTINUE> "
fi

function presentation {
  PRESENTMODE=true
  PS1="\[\033]0;\w\007$SOLBLUE\h $SOLRED\$(scm_ps1) $SOLBASE\w \n$DARKGRAY\$ $SOLBASE01"
}

function gtab() {
  gvim --remote-tab-silent "$@" & :
}
